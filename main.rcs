program ALoxidasion {

    /* Программа управления процессом оксидирования
    *
    * ДАТА СОЗДАНИЯ: 02.12.2023
    * АВТОР: Набиева Мадина Абдувалиевна
    */
	
    clock 0t100ms;
    
    const bool ON = true;
    const bool OFF = false;
    
    const int8 A0 = 0;
    const int8 A1 = 1;

    enum CAN_CMD  {
// === запрос текущих параметров (CV)        
        SEND_TR1_T = (int32)1, // запрос температуры Tr1
        SEND_TR2_T,
        SEND_TR3_T,
        SEND_TR4_T,
// === команды
        START_OPENING,        
// === технологические параметры (ТП)        
        TP_OPENING_DURATION  // длительность открытия
    }
    // Внутренние состояния системы
    // Набор состояний в которых может находиться установка
    
    //const uint32 work_STOP  = 0;
    //const uint32 work_WORK  = 1;
    //const uint32 work_ERROR = 2;

    // Переменная для хранения состояния системы в данный момент (по умолчанию ОСТАНОВ)
    //uint32 current_work_state;

    // выходной порт <вход\выход> <имя> <адрес1> <адрес2> <разрядность бит>;
    output oportD   0x00 0x2 8; // выходной порт
    
    // Входной порт
    input iportB    0x00 0x1 8; // входной порт

    // Функции

    int8 getCMD(void);
    int16 getInt16Param(void);
    float getFloatParam(void);
    time  getTimeParam(void);

    int8 sendMsgIntParam(int32, int32);
    int8 sendMsgFloatParam(int32, float);
    int16 GetAnalog(int8);

    // Глобальные переменные
    bool RE = iportB[3]; // VCC rising edge
    bool FE = iportB[4]; // VCC falling edge

    bool Tr1 = oportD[1]; // Thyristor 1
    bool Tr2 = oportD[2]; // Thyristor 2

    float Tr1Temp; // температура тиристора 1
    float Tr2Temp; // температура тиристора 2
    time tOpeningDuration;

    int8 CMD; // команда

    process Init {
        state begin {
            Tr1 = OFF;
            Tr2 = OFF;
            tOpeningDuration = 0t100ms; 
            start process GetCMD;
            stop;
        }
    }
    process GetCMD {
        state GetCommand looped {
            // Запуск рабочих процессов
            CMD = getCMD(); // возвращает !0 если есть команда
            switch (CMD) {
                case SEND_TR1_T: {
                    start process SendTr1;
                break;                
                }
                case SEND_TR2_T: {
//                    start process SendTr2;
                break;          
                }      
                case SEND_TR3_T: {
//                    start process SendTr3;
                break;                
                }
                case SEND_TR4_T: {
//                    start process SendTr4;
                break;          
                }      
// === команды
                case START_OPENING: {
                    start process Opening;
                break;          
                }      
                
// === технологические параметры (ТП) 
                case TP_OPENING_DURATION: { // длительность открытия
                    tOpeningDuration = getTimeParam();
                break;          
                }      
            }
        }
    }

    process SendTr1 {
        state begin {
            Tr1Temp = GetAnalog(A0);
            sendMsgFloatParam(SEND_TR1_T, Tr1Temp);
            stop;    
        }
    }

    process Opening {
        time tCurTime;
        time tCurDelay shared; // !!! нужны микросекунды
        state begin {
            tCurTime = 0t0s;
            tCurDelay = 0t10ms;
            start process Tr12Control;
            set next state;    
        }
        state culcCurDelay {
            tCurTime += 0t100ms; // !! see clock
            if (tCurTime >= tOpeningDuration) {
                tCurDelay = 0t0ms;
                stop;
            } else {
                tCurDelay = 0t10ms * (tOpeningDuration - tCurTime) / tOpeningDuration;
            }                
        }
    }
    process Tr12Control {
        shared tCurDelay from process Opening;
        state CheckRE {
            if (RE) {
                Tr1 = OFF;
                Tr2 = OFF;
                set next state;
            }    
        }
        state PauseRE {
            timeout (tCurDelay) {
                Tr1 = ON;
                set next state;
            }
        }
        state CheckFE {
            if (FE) {
                Tr1 = OFF;
                Tr2 = OFF;
                set next state;
            }    
        }
        state PausefE looped{
            timeout (tCurDelay) {
                Tr2 = ON;
                restart;
            }
        }
    }
}
