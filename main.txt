program ALoxidasion {

    /* Программа управления пусковыми тиристорами
    * для установки оксидирования алюминия
    *
    * ДАТА СОЗДАНИЯ: 13.11.2023
    * АВТОР: Набиева Мадина Абдувалиевна
    */
	
    // Время срабвтывания программы
    clock 0t50ms;
    // TODO Добавить проверку через внутреннее время процессора

    // Постоянные для всего цикла работы
    const bool ON =  true;
    const bool OFF = false;

    const time processTime = 0t60m; // время работы установки 60 минут

    // Внутренние состояния системы
    // Набор состояний в которых может находиться установка
    enum work_state 
    {
        STOP,
        WORK,
        ERROR
    }

    // Переменная для хранения состояния системы в данный момент
    uint32 current_work_state;

    // Производственная сигнальная лампа для сигнализирования
    // состояния работы установки
    // GREEN-работа, YELLOW-остановка, RED-ошибка
    enum lamp_color
    {
        GREEN,
        YELLOW,
        RED
    }

    // Переменная для хранения состояния лампы в данный момент
    uint32 lamp_color;

    // Задание выходных\входных адресов для контроллера
    // <вход\выход> <имя> <адрес1> <адрес2> <разрядность бит>;
    output heat_level           0x00 0xA0001 8; // степень нагрева ТЭН
    output signal_lamp          0x00 0xA0002 8; // Включение сигнальной лампы
    output thyristor_assembly   0x00 0xA0003 8; // Сигнал для тиристорной сборки

    // входные сигналы
    input electrolyte_temp      0x00 0xB0001 8; // Температура электролита
	input electrolyte_level 0x00 0xB0002 8; // Уровень электролита в ванне
    input alkalinity            0x00 0xB0003 8; // Щелочность раствора

    input start_button          0x00 0xB0004 8; // Кнопка пуск
    input stop_button           0x00 0xB0005 8; // Кнопка стоп     
	

    // первоначальный процесс запускающийся при подаче питания на плату управления
    // устанавливает параметры системы в изначальное состояние
    // запускает остальные проекты и завершается
    process contraption_init{

        state initialization{

            current_work_state = STOP;
            start process read_control_panel;
            start process read_sensors;
            start process work_status_check;
            stop;
        }
    }

    // Проверяем панель управления
    process read_control_panel{
        
        // Сигналы от кнопок
        bool btn_start_on = start_button[1];
        bool btn_stop_on =  stop_button[1];
        
        state reading_control_panel_inputs looped{
            
            // Проверяем сигналы с панели управления и запускаем соответствующие процессы
            if(btn_start_on){
                start process start_work;
            }
            else if (btn_stop_on){
                start process stop_work;
            }
        }
    }
    
    // Проверяем данные с датчиков (температура\уровень итд.)
    process read_sensors{
        
        // TODO Как получить значение с датчика не только 0 или 1?
        bool electrolyte_temp_value     = electrolyte_temp[1];  // Значение температуры электролита
        bool electrolyte_level_value    = electrolyte_level[1]; // Значение уровня электролита в ванне
        bool alkalinity_value           = alkalinity[1];        // Значение щелочности состава
        
        state reading_sensors looped{

            // TODO узнать реальные значения параметров
            
            // Если электролит перегрет
            if (electrolyte_temp_value){
                current_work_state = ERROR;
            }
            
            // Если электролита в ванне мало
            if (electrolyte_level_value){
                current_work_state = ERROR;
            }

            // Если щелочность раствора недостаточна
            if (alkalinity_value){
                current_work_state = ERROR;
            }
        }
    }
    
    // Процесс запуска работы системы
    process start_work{
        
        // Выходы для передачи данных
        bool heat_level_set         = heat_level[1];
        bool thyristor_assembly_set = thyristor_assembly[1];
        
        state start_work_process{
            
            // Запускаются элементы для работы системы
            // После процесс запуска останавливается, управление переходит в процесс отслеживания состояний

            current_work_state = WORK;
            lamp_color = GREEN;

            // Включаем нагрев
            // Даем сигнал тиристорам
            heat_level_set          = true;
            thyristor_assembly_set  = true;

            stop;
        }

    }

    // Процесс остановки системы
    process stop_work{
        
        // Выходы для передачи данных
        bool heat_level_set         = heat_level[1];
        bool thyristor_assembly_set = thyristor_assembly[1];
        
        state stop_work_process{
            
            current_work_state = WORK;
            lamp_color = GREEN;

            // Включаем нагрев
            // Даем сигнал тиристорам
            heat_level_set          = false;
            thyristor_assembly_set  = false;

            stop;
            
        }

    }
    /*
    // Процесс реагирование на ошибку
    process error_work{
        state rise_error_state{
            stop;
        }
    }
    */

    // Проверяем в каком состоянии система и реагируем соответственно
    process work_status_check{
        
        bool signal_lamp_set = signal_lamp[1];
        
        state checking_status{
            
            // Проверяем переменную состояния лампы
            if(current_work_state = WORK){
                lamp_color = GREEN;
                signal_lamp_set= true;
            }

            if(current_work_state = STOP){
                lamp_color = YELLOW;
                signal_lamp_set= true;
            }

            if(current_work_state = ERROR){
                lamp_color = RED;
                signal_lamp_set= true;
            }
            
            stop;
        }
    }
}